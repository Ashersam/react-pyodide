{"version":3,"sources":["python/script.py","data.js","App.js","reportWebVitals.js","index.js"],"names":["textdata","useStyles","makeStyles","theme","listSection","backgroundColor","ul","padding","root","flexGrow","demo","palette","background","paper","width","maxWidth","overflow","maxHeight","title","margin","spacing","text","Custom","textVal","setTextVal","runEffect","classes","useState","temtText","setTempText","useEffect","localForage","then","value","toString","console","log","catch","err","className","Typography","style","fontWeight","variant","TextField","id","label","multiline","rows","fullWidth","onChange","e","target","HandleText","Button","color","onClick","IconButton","preventDefault","window","location","reload","refresh","App","mounted","useRef","output","setOutput","processing","setProcessing","loadModule","script","a","fetch","src","code","trainCode","languagePluginLoader","current","pyodide","loadPackage","runPython","res","data","Paper","Grid","container","item","xs","List","subheader","map","index","ListItem","ListItemText","primary","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1519fcf2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/script.f4fa9039.py\";","\r\nexport const textdata = [\r\n    `Heres a shorter version. This will give you a data structure with each individual \r\n    sentence, and each token within the sentence. I prefer the TweetTokenizer for messy, \r\n    real world language. The sentence tokenizer is considered decent, but be careful not \r\n    to lower your word case till after this step, as it may impact the accuracy of \r\n    detecting the boundaries of messy text.`\r\n];","import { useEffect, useRef, useState } from 'react';\r\nimport script from './python/script.py';\r\nimport { Button, Container, Grid, IconButton, Paper, TextField, Typography } from '@material-ui/core'\r\nimport './App.css';\r\nimport { textdata } from './data.js';\r\nimport * as localForage from 'localforage';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  listSection: {\r\n    backgroundColor: 'inherit',\r\n  },\r\n  ul: {\r\n    backgroundColor: 'inherit',\r\n    padding: 0,\r\n  },\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  demo: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    width: '100%',\r\n    maxWidth: 360,\r\n    overflow: 'auto',\r\n    maxHeight: 800,\r\n  },\r\n  title: {\r\n    margin: theme.spacing(4, 0, 2),\r\n  },\r\n  text:{\r\n    flexGrow: 1,\r\n    margin: theme.spacing(4, 4, 2),\r\n    padding: 10\r\n  }\r\n}));\r\n\r\nexport const Custom = ({ textVal, setTextVal, runEffect }) => {\r\n  const classes = useStyles();\r\n  const [temtText, setTempText] = useState()\r\n  const refresh = (e) => {\r\n    e.preventDefault()\r\n    window.location.reload()\r\n  } \r\n  useEffect(() => {\r\n    localForage.getItem('sometext').then(function(value) {\r\n      // This code runs once the value has been loaded\r\n      // from the offline store.\r\n      if(value===null){\r\n        localForage.setItem('sometext', textdata[0].toString()).then(function (value) {\r\n          setTextVal(value)\r\n          setTempText(value)\r\n              console.log(value);\r\n          }).catch(function(err) {\r\n              // This code runs if there were any errors\r\n              console.log(err);\r\n          });\r\n      }\r\n      else {\r\n        localForage.getItem('sometext').then(function (value) {\r\n          setTextVal(value)\r\n          setTempText(value)\r\n            console.log(value);\r\n          }).catch(function(err) {\r\n              // This code runs if there were any errors\r\n              console.log(err);\r\n          });\r\n      }\r\n  }).catch(function(err) {\r\n      // This code runs if there were any errors\r\n      console.log(err);\r\n  });\r\n  },[])\r\n\r\n  const HandleText = (e) => {\r\n    setTempText(e.target.value)\r\n    localForage.setItem('sometext', e.target.value).then(function (value) {\r\n      setTextVal(value)\r\n          console.log(value);\r\n      }).catch(function(err) {\r\n          // This code runs if there were any errors\r\n          console.log(err);\r\n      });\r\n  } \r\n  return(\r\n    <div className={classes.text}>\r\n    <Typography style={{fontWeight:700}} variant=\"h6\" className={classes.title}>\r\n            Text to Pyodide\r\n        </Typography>\r\n      <TextField\r\n          id=\"outlined-multiline-static\"\r\n          label=\"Enter Text\"\r\n          multiline\r\n          rows={8}\r\n          fullWidth\r\n          value={temtText || \"\"}\r\n          variant=\"outlined\"\r\n          onChange={(e) => {HandleText(e)}}\r\n        />\r\n        <Button \r\n        variant=\"contained\" \r\n        color=\"secondary\"\r\n        onClick={runEffect}\r\n        >\r\n        Process\r\n        </Button>\r\n        <IconButton \r\n        variant=\"contained\" \r\n        color=\"primary\"\r\n\r\n        onClick={(e) => refresh(e)}\r\n        >\r\n        <RefreshIcon />\r\n        </IconButton>\r\n        </div>\r\n  )\r\n} \r\n\r\nfunction App() {\r\n  const classes = useStyles();\r\n  const mounted = useRef(false);\r\n  const [output, setOutput] = useState([]);\r\n  const [textVal, setTextVal] = useState()\r\n  const [processing, setProcessing] = useState(false)\r\n\r\n  // const runScript = code => {\r\n  //   window.pyodide.loadPackage([]).then(() => {\r\n  //     const output = window.pyodide.runPython(code);\r\n  //     setOutput(output);\r\n  //   })\r\n  // }\r\n\r\n  const loadModule = async script => {\r\n    const code = await fetch(script).then(src => src.text());\r\n    return code;\r\n  }\r\n\r\n  \r\n  const runEffect = async () => {\r\n      setProcessing(true)\r\n      const trainCode = await loadModule(script);\r\n      window.languagePluginLoader\r\n        .then(() => {\r\n          if (mounted.current === false){\r\n            mounted.current = true;\r\n            return window.pyodide.loadPackage(['micropip']);\r\n          }\r\n        })\r\n        .then(() => {\r\n          const py = window.pyodide;\r\n            const output = py.runPython(trainCode);\r\n            output.then((res) => {\r\n              if(res){\r\n                setProcessing(false)\r\n              }\r\n              setOutput(res);\r\n            })\r\n            window.data = {\r\n              textdata: textVal\r\n            };\r\n        })\r\n  }\r\n  \r\n\r\n  return (\r\n    <Paper>\r\n    <div className={classes.root}>\r\n    <Grid container spacing={3}>\r\n    <Custom \r\n    textVal={textVal}\r\n    setTextVal={setTextVal}\r\n    runEffect={runEffect}\r\n    />\r\n      <Grid item xs={2} />\r\n        <Grid item xs>\r\n          <Typography style={{fontWeight:700}} variant=\"h6\" className={classes.title}>\r\n            Results from python scripts:\r\n          </Typography>\r\n          <div className={classes.demo}>\r\n          {(output && processing === false) ? (\r\n            <List className={classes.root} subheader={<li />}>\r\n            {output.map((item, index) => (\r\n              <ListItem key={index}>\r\n                <ListItemText primary={`${item}`} />\r\n              </ListItem>\r\n            ))}\r\n            </List>\r\n          ) : \r\n          <Typography style={{fontWeight:300}} variant=\"h6\" className={classes.title}>\r\n            Loading...\r\n          </Typography>\r\n          }\r\n    </div>\r\n    </Grid>\r\n      </Grid>\r\n      </div>\r\n      </Paper>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}